function SCOUR_Synthetic_noisy(nT,cov,num_IC,rep)
warning('off','all')
rng('shuffle');

fprintf('Starting machine learning framework...\n');

%% Initial Preparation of Synthetic Models
% Train on autogenerated data, test on BiggerModel and SmallerModel models

% BiggerModel and SmallerModel stoichiometric interactions
BiggerModel.S = sparse([ 1 -1  0  0  0  0  0  0  0  0 ;
                 0  1 -1  0  0 -1  0  0  0  0 ;
                 0  0  1 -1 -1  0  0  0  0  0 ;
                 0  0  0  1  0  0  0  0 -1  0 ;
                 0  0  0  0  1  0  0  0  0  0 ;
                 0  0  0  0  0  1 -1 -1  0  0 ;
                 0  0  0  0  0  0  1  0  0  0 ;
                 0  0  0  0  0  0  0  1  0 -1 ;
                 0  0  0  0  0  0  0  0  1  0 ;
                 0  0  0  0  0  0  0  0  0  1 ;]);

SmallerModel.S = sparse([ 1 -1  0  0  0  0 ;
                 0  1 -1 -1 -1  0 ;
                 0  0  1  0  0  0 ;
                 0  0  0  1  0  0 ;
                 0  0  0  0  1 -1 ;
                 0  0  0  0  0  1 ;]);

% Find BiggerModel mass action (MA) interactions
[row_BiggerModelMA col_BiggerModelMA] = find(BiggerModel.S < 0);
BiggerModel_MA = [row_BiggerModelMA col_BiggerModelMA];

unique_flux = unique(BiggerModel_MA(:,2));
count_1contMet = 1;
count_2contMet = 1;
for i = 1:length(unique_flux)
    controller_met_idx = find(BiggerModel_MA(:,2) == unique_flux(i));
    if length(BiggerModel_MA(controller_met_idx,1)) == 1
        BiggerModel_1contMet_List(count_1contMet,:) = [BiggerModel_MA(controller_met_idx,1)' unique_flux(i)];
        count_1contMet = count_1contMet + 1;
    elseif length(BiggerModel_MA(controller_met_idx,1)) == 2
        BiggerModel_2contMet_List(count_2contMet,:) = [BiggerModel_MA(controller_met_idx,1)' unique_flux(i)];
        count_2contMet = count_2contMet + 1;
    end
end

% Find SmallerModel mass action (MA) interactions
[row_SmallerModelMA col_SmallerModelMA] = find(SmallerModel.S < 0);
SmallerModel_MA = [row_SmallerModelMA col_SmallerModelMA];

unique_flux = unique(SmallerModel_MA(:,2));
count_1contMet = 1;
count_2contMet = 1;
for i = 1:length(unique_flux)
    controller_met_idx = find(SmallerModel_MA(:,2) == unique_flux(i));
    if length(SmallerModel_MA(controller_met_idx,1)) == 1
        SmallerModel_1contMet_List(count_1contMet,:) = [SmallerModel_MA(controller_met_idx,1)' unique_flux(i)];
        count_1contMet = count_1contMet + 1;
    elseif length(SmallerModel_MA(controller_met_idx,1)) == 2
        SmallerModel_2contMet_List(count_2contMet,:) = [SmallerModel_MA(controller_met_idx,1)' unique_flux(i)];
        count_2contMet = count_2contMet + 1;
    end
end

BiggerModel_prefix = 'BiggerModel';
SmallerModel_prefix = 'SmallerModel';


%% Identify 1 controller metabolite reactions

% List of BiggerModel mass action only interactions and find where they occur
% in list of all mass action interactions
true_1contMet_BiggerModel = [6,7;
                         4,9;
                         8,10];
count = 1;
for regIdx = 1:length(BiggerModel_1contMet_List)
    for trueIdx = 1:size(true_1contMet_BiggerModel,1)
        if isequal(BiggerModel_1contMet_List(regIdx,:),true_1contMet_BiggerModel(trueIdx,:))
            BiggerModel_1contMet_trueInRegIdx(count,1) = regIdx;
            count = count + 1;
        end
    end
end

% List of SmallerModel mass action only interactions and find where they 
% occur in list of all mass action interactions
true_1contMet_SmallerModel = [2,5];
count = 1;
for regIdx = 1:length(SmallerModel_1contMet_List)
    for trueIdx = 1:size(true_1contMet_SmallerModel,1)
        if isequal(SmallerModel_1contMet_List(regIdx,:),true_1contMet_SmallerModel(trueIdx,:))
            SmallerModel_1contMet_trueInRegIdx(count,1) = regIdx;
            count = count + 1;
        end
    end
end

% Load autogenerated data information
load(sprintf('AutoGenerateTrain_meta_1contMet_k-01_nT-%03d_cov-%02d_rep-%03d_smooth.mat',nT,cov,rep),'train_true_regs_1contMet');
train_true_regs_meta_1contMet = train_true_regs_1contMet;
trueInRegIdx_AutoGenerateTrain_meta_1contMet = find(train_true_regs_meta_1contMet == 1);
load(sprintf('AutoGenerateTrain_1contMet_k-01_nT-%03d_cov-%02d_rep-%03d_smooth.mat',nT,cov,rep),'train_true_regs_1contMet');
trueInRegIdx_AutoGenerateTrain_1contMet = find(train_true_regs_1contMet == 1);

% Create feature matrix
autogen_prefix = 'AutoGenerateTrain_1contMet';
autogen_meta_prefix = 'AutoGenerateTrain_meta_1contMet';
createFeatMatrix_1contMet_synthetic_noisy

% Normalize feature matrices
featureMatrix_AutoGenerateTrain_1contMet_n = (featureMatrix_AutoGenerateTrain_1contMet-prctile(featureMatrix_AutoGenerateTrain_1contMet,20,2))./(prctile(featureMatrix_AutoGenerateTrain_1contMet,80)-prctile(featureMatrix_AutoGenerateTrain_1contMet,20));
featureMatrix_AutoGenerateTrain_meta_1contMet_n = (featureMatrix_AutoGenerateTrain_meta_1contMet-prctile(featureMatrix_AutoGenerateTrain_meta_1contMet,20,2))./(prctile(featureMatrix_AutoGenerateTrain_meta_1contMet,80)-prctile(featureMatrix_AutoGenerateTrain_meta_1contMet,20));
featureMatrix_1contMet_BiggerModel_n = (featureMatrix_1contMet_BiggerModel-prctile(featureMatrix_1contMet_BiggerModel,20,2))./(prctile(featureMatrix_1contMet_BiggerModel,80)-prctile(featureMatrix_1contMet_BiggerModel,20));
featureMatrix_1contMet_SmallerModel_n = (featureMatrix_1contMet_SmallerModel-prctile(featureMatrix_1contMet_SmallerModel,20,2))./(prctile(featureMatrix_1contMet_SmallerModel,80)-prctile(featureMatrix_1contMet_SmallerModel,20));

% Setup training set and training label
trueInteractionSet_1contMet = featureMatrix_AutoGenerateTrain_1contMet_n(:,trueInRegIdx_AutoGenerateTrain_1contMet);
trueInteractionLabel_1contMet = logical(ones(1,size(trueInteractionSet_1contMet,2)));
falseInteractionSet_1contMet = featureMatrix_AutoGenerateTrain_1contMet_n;
falseInteractionSet_1contMet(:,trueInRegIdx_AutoGenerateTrain_1contMet) = [];
falseInteractionLabel_1contMet = logical(zeros(1,size(falseInteractionSet_1contMet,2)));

trainingSet_1contMet = [trueInteractionSet_1contMet falseInteractionSet_1contMet];
trainingLabel_1contMet = [trueInteractionLabel_1contMet falseInteractionLabel_1contMet];

% Create first level models
Mdl_RF_1contMet = TreeBagger(200,trainingSet_1contMet',double(trainingLabel_1contMet),'Method','Regression','MinLeafSize',5);

Mdl_KNN_1contMet = fitcknn(trainingSet_1contMet',trainingLabel_1contMet,'NumNeighbors',6);

Mdl_SNN_1contMet = patternnet(20,'trainscg');
Mdl_SNN_1contMet.trainParam.showWindow = 0;    
Mdl_SNN_1contMet = train(Mdl_SNN_1contMet,trainingSet_1contMet,trainingLabel_1contMet);
Mdl_SNN_1contMet = train(Mdl_SNN_1contMet,trainingSet_1contMet,trainingLabel_1contMet);
Mdl_SNN_1contMet = train(Mdl_SNN_1contMet,trainingSet_1contMet,trainingLabel_1contMet);

Mdl_DA_1contMet = fitcdiscr(trainingSet_1contMet',trainingLabel_1contMet,'discrimType','pseudoLinear');

% Predicted labels using second training set
trueInteractionSet_meta_1contMet = featureMatrix_AutoGenerateTrain_meta_1contMet_n(:,trueInRegIdx_AutoGenerateTrain_meta_1contMet);
trueInteractionLabel_meta_1contMet = logical(ones(1,size(trueInteractionSet_meta_1contMet,2)));
falseInteractionSet_meta_1contMet = featureMatrix_AutoGenerateTrain_meta_1contMet_n;
falseInteractionSet_meta_1contMet(:,trueInRegIdx_AutoGenerateTrain_meta_1contMet) = [];
falseInteractionLabel_meta_1contMet = logical(zeros(1,size(falseInteractionSet_meta_1contMet,2)));

trainingSet_meta_1contMet = [trueInteractionSet_meta_1contMet falseInteractionSet_meta_1contMet];
trainingLabel_meta_1contMet = [trueInteractionLabel_meta_1contMet falseInteractionLabel_meta_1contMet];

predictedLabel_RF_meta_1contMet = Mdl_RF_1contMet.predict(trainingSet_meta_1contMet');
predictedLabel_KNN_meta_1contMet = double(Mdl_KNN_1contMet.predict(trainingSet_meta_1contMet'));
predictedLabel_SNN_meta_1contMet = Mdl_SNN_1contMet(trainingSet_meta_1contMet)';
predictedLabel_DA_meta_1contMet = double(Mdl_DA_1contMet.predict(trainingSet_meta_1contMet'));

predictedLabel_L1_meta_1contMet = [predictedLabel_RF_meta_1contMet predictedLabel_KNN_meta_1contMet predictedLabel_SNN_meta_1contMet predictedLabel_DA_meta_1contMet];

% Create second level model
predictedLabel_L1_meta_1contMet_good = predictedLabel_L1_meta_1contMet;
poor_classifier_1contMet = find(all(~diff(predictedLabel_L1_meta_1contMet_good)));
if ~isempty(poor_classifier_1contMet)
    predictedLabel_L1_meta_1contMet_good(:,poor_classifier_1contMet) = [];
end
Mdl_DA_meta_1contMet = fitcdiscr(predictedLabel_L1_meta_1contMet_good,trainingLabel_meta_1contMet,'discrimType','pseudoLinear');

% BiggerModel
% Setup testing set and testing label
testingSet_BiggerModel_1contMet = featureMatrix_1contMet_BiggerModel_n;
testingLabel_BiggerModel_1contMet = logical(zeros(size(testingSet_BiggerModel_1contMet,2),1));
testingLabel_BiggerModel_1contMet(BiggerModel_1contMet_trueInRegIdx) = 1;

% Predict where 1 controller metabolite reactions occur in BiggerModel
predictedLabel_RF_BiggerModel_1contMet = Mdl_RF_1contMet.predict(testingSet_BiggerModel_1contMet');
predictedLabel_KNN_BiggerModel_1contMet = double(Mdl_KNN_1contMet.predict(testingSet_BiggerModel_1contMet'));
predictedLabel_SNN_BiggerModel_1contMet = Mdl_SNN_1contMet(testingSet_BiggerModel_1contMet)';
predictedLabel_DA_BiggerModel_1contMet = double(Mdl_DA_1contMet.predict(testingSet_BiggerModel_1contMet'));

predictedLabel_L1_BiggerModel_1contMet = [predictedLabel_RF_BiggerModel_1contMet predictedLabel_KNN_BiggerModel_1contMet predictedLabel_SNN_BiggerModel_1contMet predictedLabel_DA_BiggerModel_1contMet];
if ~isempty(poor_classifier_1contMet)
    predictedLabel_L1_BiggerModel_1contMet(:,poor_classifier_1contMet) = [];
end
predictedLabel_L2_BiggerModel_1contMet = Mdl_DA_meta_1contMet.predict(predictedLabel_L1_BiggerModel_1contMet)

% Accuracy, sensitivity, and specificity calculations
predictionAccuracy_BiggerModel_1contMet = sum(predictedLabel_L2_BiggerModel_1contMet==testingLabel_BiggerModel_1contMet)/length(testingLabel_BiggerModel_1contMet)
fp = 0;
fn = 0;
for k = 1:length(testingLabel_BiggerModel_1contMet)
    if testingLabel_BiggerModel_1contMet(k) == 1 && predictedLabel_L2_BiggerModel_1contMet(k) == 0
        fn = fn + 1;
    elseif testingLabel_BiggerModel_1contMet(k) == 0 && predictedLabel_L2_BiggerModel_1contMet(k) == 1
        fp = fp + 1;
    end
end

tp = 0;
tn = 0;
for k = 1:length(testingLabel_BiggerModel_1contMet)
    if testingLabel_BiggerModel_1contMet(k) == 1 && predictedLabel_L2_BiggerModel_1contMet(k) == 1
        tp = tp + 1;
    elseif testingLabel_BiggerModel_1contMet(k) == 0 && predictedLabel_L2_BiggerModel_1contMet(k) == 0
        tn = tn + 1;
    end
end
sensitivity_BiggerModel_1contMet = tp / (fn+tp)
specificity_BiggerModel_1contMet = tn / (tn+fp)
ppv_BiggerModel_1contMet = tp / (tp+fp);
npv_BiggerModel_1contMet = tp / (tn+fn);

% SmallerModel
% Setup testing set and testing label
testingSet_SmallerModel_1contMet = featureMatrix_1contMet_SmallerModel_n;
testingLabel_SmallerModel_1contMet = logical(zeros(size(testingSet_SmallerModel_1contMet,2),1));
testingLabel_SmallerModel_1contMet(SmallerModel_1contMet_trueInRegIdx) = 1;

% Predict where 1 controller metabolite reactions occur in SmallerModel
predictedLabel_RF_SmallerModel_1contMet = Mdl_RF_1contMet.predict(testingSet_SmallerModel_1contMet');
predictedLabel_KNN_SmallerModel_1contMet = double(Mdl_KNN_1contMet.predict(testingSet_SmallerModel_1contMet'));
predictedLabel_SNN_SmallerModel_1contMet = Mdl_SNN_1contMet(testingSet_SmallerModel_1contMet)';
predictedLabel_DA_SmallerModel_1contMet = double(Mdl_DA_1contMet.predict(testingSet_SmallerModel_1contMet'));

predictedLabel_L1_SmallerModel_1contMet = [predictedLabel_RF_SmallerModel_1contMet predictedLabel_KNN_SmallerModel_1contMet predictedLabel_SNN_SmallerModel_1contMet predictedLabel_DA_SmallerModel_1contMet];
if ~isempty(poor_classifier_1contMet)
    predictedLabel_L1_SmallerModel_1contMet(:,poor_classifier_1contMet) = [];
end
predictedLabel_L2_SmallerModel_1contMet = Mdl_DA_meta_1contMet.predict(predictedLabel_L1_SmallerModel_1contMet)

% Accuracy, sensitivity, and specificity calculations
predictionAccuracy_SmallerModel_1contMet = sum(predictedLabel_L2_SmallerModel_1contMet==testingLabel_SmallerModel_1contMet)/length(testingLabel_SmallerModel_1contMet)
fp = 0;
fn = 0;
for k = 1:length(testingLabel_SmallerModel_1contMet)
    if testingLabel_SmallerModel_1contMet(k) == 1 && predictedLabel_L2_SmallerModel_1contMet(k) == 0
        fn = fn + 1;
    elseif testingLabel_SmallerModel_1contMet(k) == 0 && predictedLabel_L2_SmallerModel_1contMet(k) == 1
        fp = fp + 1;
    end
end

tp = 0;
tn = 0;
for k = 1:length(testingLabel_SmallerModel_1contMet)
    if testingLabel_SmallerModel_1contMet(k) == 1 && predictedLabel_L2_SmallerModel_1contMet(k) == 1
        tp = tp + 1;
    elseif testingLabel_SmallerModel_1contMet(k) == 0 && predictedLabel_L2_SmallerModel_1contMet(k) == 0
        tn = tn + 1;
    end
end
sensitivity_SmallerModel_1contMet = tp / (fn+tp)
specificity_SmallerModel_1contMet = tn / (tn+fp)
ppv_SmallerModel_1contMet = tp / (tp+fp);
npv_SmallerModel_1contMet = tp / (tn+fn);

%% Remove 1 controller metabolite reactions

% Remove from BiggerModel using predicted 1 controller metabolite
% interactions
predicted_BiggerModel_1contMet = [BiggerModel_1contMet_List(find(predictedLabel_L2_BiggerModel_1contMet==1),:)];

BiggerModel_fluxes_to_remove =  unique([1 predicted_BiggerModel_1contMet(:,2)']);
%BiggerModel_fluxes_to_remove =  unique([1 7 9 10]);
if ~isequal(sort(BiggerModel_fluxes_to_remove),1:size(BiggerModel.S,2))
    BiggerModel_regScheme_2contMet = createRegSchemeList(BiggerModel.S,BiggerModel_fluxes_to_remove);
end

% Remove from SmallerModel using predicted 1 controller metabolite
% interactions
predicted_SmallerModel_1contMet = [SmallerModel_1contMet_List(find(predictedLabel_L2_SmallerModel_1contMet==1),:)];

SmallerModel_fluxes_to_remove =  unique([1 predicted_SmallerModel_1contMet(:,2)']);
%SmallerModel_fluxes_to_remove =  unique([1 5]);
if ~isequal(sort(SmallerModel_fluxes_to_remove),1:size(SmallerModel.S,2))
    SmallerModel_regScheme_2contMet = createRegSchemeList(SmallerModel.S,SmallerModel_fluxes_to_remove);
end

%% Identify 2 controller metabolite reactions

if exist('BiggerModel_regScheme_2contMet','var')
    % List of BiggerModel interactions with two controller metabolites
    true_2contMet_BiggerModel = [2,4,3;
                             3,8,4;
                             2,8,6];
    count = 1;
    for regIdx = 1:length(BiggerModel_regScheme_2contMet)
        for trueIdx = 1:size(true_2contMet_BiggerModel,1)
            if isequal(BiggerModel_regScheme_2contMet(regIdx,:),true_2contMet_BiggerModel(trueIdx,:))
                BiggerModel_2contMet_trueInRegIdx(count,1) = regIdx;
                count = count + 1;
            end
        end
    end
end

if exist('SmallerModel_regScheme_2contMet','var')
    % List of SmallerModel interactions with two controller metabolites
    true_2contMet_SmallerModel = [2,5,4;
                                  2,6,3];
    count = 1;
    for regIdx = 1:length(SmallerModel_regScheme_2contMet)
        for trueIdx = 1:size(true_2contMet_SmallerModel,1)
            if isequal(SmallerModel_regScheme_2contMet(regIdx,:),true_2contMet_SmallerModel(trueIdx,:))
                SmallerModel_2contMet_trueInRegIdx(count,1) = regIdx;
                count = count + 1;
            end
        end
    end
end

% Load autogenerated data information
load(sprintf('AutoGenerateTrain_2contMet_k-01_nT-%03d_cov-%02d_rep-%03d_smooth.mat',nT,cov,rep)','train_true_regs_2contMet','train_interaction_mets_2contMet');
train_true_regs_meta_2contMet = train_true_regs_2contMet;
train_interaction_mets_meta_2contMet = train_interaction_mets_2contMet;
trueInRegIdx_AutoGenerateTrain_meta_2contMet = find(train_true_regs_meta_2contMet == 1);
load(sprintf('AutoGenerateTrain_2contMet_k-01_nT-%03d_cov-%02d_rep-%03d_smooth.mat',nT,cov,rep)','train_true_regs_2contMet','train_interaction_mets_2contMet');
trueInRegIdx_AutoGenerateTrain_2contMet = find(train_true_regs_2contMet == 1);

% Create feature matrix
autogen_prefix = 'AutoGenerateTrain_2contMet';
autogen_meta_prefix = 'AutoGenerateTrain_meta_2contMet';
createFeatMatrix_2contMet_synthetic_noisy

% Setup training set and training label
trueInteractionSet_2contMet = featureMatrix_AutoGenerateTrain_2contMet_n(:,trueInRegIdx_AutoGenerateTrain_2contMet);
trueInteractionLabel_2contMet = logical(ones(1,size(trueInteractionSet_2contMet,2)));
falseInteractionSet_2contMet = featureMatrix_AutoGenerateTrain_2contMet_n;
falseInteractionSet_2contMet(:,trueInRegIdx_AutoGenerateTrain_2contMet) = [];
falseInteractionLabel_2contMet = logical(zeros(1,size(falseInteractionSet_2contMet,2)));

trainingSet_2contMet = [trueInteractionSet_2contMet falseInteractionSet_2contMet];
trainingLabel_2contMet = [trueInteractionLabel_2contMet falseInteractionLabel_2contMet];

% Create first level models
Mdl_RF_2contMet = TreeBagger(200,trainingSet_2contMet',double(trainingLabel_2contMet),'Method','Regression','MinLeafSize',5);

Mdl_KNN_2contMet = fitcknn(trainingSet_2contMet',trainingLabel_2contMet,'NumNeighbors',6);

Mdl_SNN_2contMet = patternnet(20,'trainscg');
Mdl_SNN_2contMet.trainParam.showWindow = 0;    
Mdl_SNN_2contMet = train(Mdl_SNN_2contMet,trainingSet_2contMet,trainingLabel_2contMet);
Mdl_SNN_2contMet = train(Mdl_SNN_2contMet,trainingSet_2contMet,trainingLabel_2contMet);
Mdl_SNN_2contMet = train(Mdl_SNN_2contMet,trainingSet_2contMet,trainingLabel_2contMet);

Mdl_DA_2contMet = fitcdiscr(trainingSet_2contMet',trainingLabel_2contMet,'discrimType','pseudoLinear');

% Predicted labels using second training set
trueInteractionSet_meta_2contMet = featureMatrix_AutoGenerateTrain_meta_2contMet_n(:,trueInRegIdx_AutoGenerateTrain_meta_2contMet);
trueInteractionLabel_meta_2contMet = logical(ones(1,size(trueInteractionSet_meta_2contMet,2)));
falseInteractionSet_meta_2contMet = featureMatrix_AutoGenerateTrain_meta_2contMet_n;
falseInteractionSet_meta_2contMet(:,trueInRegIdx_AutoGenerateTrain_meta_2contMet) = [];
falseInteractionLabel_meta_2contMet = logical(zeros(1,size(falseInteractionSet_meta_2contMet,2)));

trainingSet_meta_2contMet = [trueInteractionSet_meta_2contMet falseInteractionSet_meta_2contMet];
trainingLabel_meta_2contMet = [trueInteractionLabel_meta_2contMet falseInteractionLabel_meta_2contMet];

predictedLabel_RF_meta_2contMet = Mdl_RF_2contMet.predict(trainingSet_meta_2contMet');
predictedLabel_KNN_meta_2contMet = double(Mdl_KNN_2contMet.predict(trainingSet_meta_2contMet'));
predictedLabel_SNN_meta_2contMet = Mdl_SNN_2contMet(trainingSet_meta_2contMet)';
predictedLabel_DA_meta_2contMet = double(Mdl_DA_2contMet.predict(trainingSet_meta_2contMet'));

predictedLabel_L1_meta_2contMet = [predictedLabel_RF_meta_2contMet predictedLabel_KNN_meta_2contMet predictedLabel_SNN_meta_2contMet predictedLabel_DA_meta_2contMet];

% Create second level model
predictedLabel_L1_meta_2contMet_good = predictedLabel_L1_meta_2contMet;
poor_classifier_2contMet = find(all(~diff(predictedLabel_L1_meta_2contMet_good)));
if ~isempty(poor_classifier_2contMet)
    predictedLabel_L1_meta_2contMet_good(:,poor_classifier_2contMet) = [];
end
Mdl_DA_meta_2contMet = fitcdiscr(predictedLabel_L1_meta_2contMet_good,trainingLabel_meta_2contMet,'discrimType','pseudoLinear');

if exist('BiggerModel_regScheme_2contMet','var')
    % BiggerModel
    % Setup testing set and testing label
    testingSet_BiggerModel_2contMet = featureMatrix_2contMet_BiggerModel_n;
    testingLabel_BiggerModel_2contMet = logical(zeros(size(testingSet_BiggerModel_2contMet,2),1));
    if exist('BiggerModel_2contMet_trueInRegIdx','var')
        testingLabel_BiggerModel_2contMet(BiggerModel_2contMet_trueInRegIdx) = 1;
    end

    % Predict where 2 controller metabolite reactions occur in BiggerModel
    predictedLabel_RF_BiggerModel_2contMet = Mdl_RF_2contMet.predict(testingSet_BiggerModel_2contMet');
    predictedLabel_KNN_BiggerModel_2contMet = double(Mdl_KNN_2contMet.predict(testingSet_BiggerModel_2contMet'));
    predictedLabel_SNN_BiggerModel_2contMet = Mdl_SNN_2contMet(testingSet_BiggerModel_2contMet)';
    predictedLabel_DA_BiggerModel_2contMet = double(Mdl_DA_2contMet.predict(testingSet_BiggerModel_2contMet'));
    
    predictedLabel_L1_BiggerModel_2contMet = [predictedLabel_RF_BiggerModel_2contMet predictedLabel_KNN_BiggerModel_2contMet predictedLabel_SNN_BiggerModel_2contMet predictedLabel_DA_BiggerModel_2contMet];
    if ~isempty(poor_classifier_2contMet)
        predictedLabel_L1_BiggerModel_2contMet(:,poor_classifier_2contMet) = [];
    end
    predictedLabel_L2_BiggerModel_2contMet = Mdl_DA_meta_2contMet.predict(predictedLabel_L1_BiggerModel_2contMet)

    % Accuracy, sensitivity, and specificity calculations
    predictionAccuracy_BiggerModel_2contMet = sum(predictedLabel_L2_BiggerModel_2contMet==testingLabel_BiggerModel_2contMet)/length(testingLabel_BiggerModel_2contMet)
    fp = 0;
    fn = 0;
    for k = 1:length(testingLabel_BiggerModel_2contMet)
        if testingLabel_BiggerModel_2contMet(k) == 1 && predictedLabel_L2_BiggerModel_2contMet(k) == 0
            fn = fn + 1;
        elseif testingLabel_BiggerModel_2contMet(k) == 0 && predictedLabel_L2_BiggerModel_2contMet(k) == 1
            fp = fp + 1;
        end
    end

    tp = 0;
    tn = 0;
    for k = 1:length(testingLabel_BiggerModel_2contMet)
        if testingLabel_BiggerModel_2contMet(k) == 1 && predictedLabel_L2_BiggerModel_2contMet(k) == 1
            tp = tp + 1;
        elseif testingLabel_BiggerModel_2contMet(k) == 0 && predictedLabel_L2_BiggerModel_2contMet(k) == 0
            tn = tn + 1;
        end
    end
    sensitivity_BiggerModel_2contMet = tp / (fn+tp)
    specificity_BiggerModel_2contMet = tn / (tn+fp)
    ppv_BiggerModel_2contMet = tp / (tp+fp);
    npv_BiggerModel_2contMet = tp / (tn+fn);
end

if exist('SmallerModel_regScheme_2contMet','var')
    % SmallerModel
    % Setup testing set and testing label
    testingSet_SmallerModel_2contMet = featureMatrix_2contMet_SmallerModel_n;
    testingLabel_SmallerModel_2contMet = logical(zeros(size(testingSet_SmallerModel_2contMet,2),1));
    if exist('SmallerModel_2contMet_trueInRegIdx','var')
        testingLabel_SmallerModel_2contMet(SmallerModel_2contMet_trueInRegIdx) = 1;
    end

    % Predict where 2 controller metabolite reactions occur in SmallerModel
    predictedLabel_RF_SmallerModel_2contMet = Mdl_RF_2contMet.predict(testingSet_SmallerModel_2contMet');
    predictedLabel_KNN_SmallerModel_2contMet = double(Mdl_KNN_2contMet.predict(testingSet_SmallerModel_2contMet'));
    predictedLabel_SNN_SmallerModel_2contMet = Mdl_SNN_2contMet(testingSet_SmallerModel_2contMet)';
    predictedLabel_DA_SmallerModel_2contMet = double(Mdl_DA_2contMet.predict(testingSet_SmallerModel_2contMet'));
    
    predictedLabel_L1_SmallerModel_2contMet = [predictedLabel_RF_SmallerModel_2contMet predictedLabel_KNN_SmallerModel_2contMet predictedLabel_SNN_SmallerModel_2contMet predictedLabel_DA_SmallerModel_2contMet];
    if ~isempty(poor_classifier_2contMet)
        predictedLabel_L1_SmallerModel_2contMet(:,poor_classifier_2contMet) = [];
    end
    predictedLabel_L2_SmallerModel_2contMet = Mdl_DA_meta_2contMet.predict(predictedLabel_L1_SmallerModel_2contMet)

    % Accuracy, sensitivity, and specificity calculations
    predictionAccuracy_SmallerModel_2contMet = sum(predictedLabel_L2_SmallerModel_2contMet==testingLabel_SmallerModel_2contMet)/length(testingLabel_SmallerModel_2contMet)
    fp = 0;
    fn = 0;
    for k = 1:length(testingLabel_SmallerModel_2contMet)
        if testingLabel_SmallerModel_2contMet(k) == 1 && predictedLabel_L2_SmallerModel_2contMet(k) == 0
            fn = fn + 1;
        elseif testingLabel_SmallerModel_2contMet(k) == 0 && predictedLabel_L2_SmallerModel_2contMet(k) == 1
            fp = fp + 1;
        end
    end

    tp = 0;
    tn = 0;
    for k = 1:length(testingLabel_SmallerModel_2contMet)
        if testingLabel_SmallerModel_2contMet(k) == 1 && predictedLabel_L2_SmallerModel_2contMet(k) == 1
            tp = tp + 1;
        elseif testingLabel_SmallerModel_2contMet(k) == 0 && predictedLabel_L2_SmallerModel_2contMet(k) == 0
            tn = tn + 1;
        end
    end
    sensitivity_SmallerModel_2contMet = tp / (fn+tp)
    specificity_SmallerModel_2contMet = tn / (tn+fp)
    ppv_SmallerModel_2contMet = tp / (tp+fp);
    npv_SmallerModel_2contMet = tp / (tn+fn);
end

%% Remove 2 controller metabolite reactions

if exist('BiggerModel_regScheme_2contMet','var')
    % Remove from BiggerModel using predicted 2 controller metabolite
    % interactions
    predicted_BiggerModel_2contMet = [BiggerModel_regScheme_2contMet(find(predictedLabel_L2_BiggerModel_2contMet==1),:)];

    BiggerModel_fluxes_to_remove =  unique([1 predicted_BiggerModel_1contMet(:,2)' predicted_BiggerModel_2contMet(:,3)']);
    %BiggerModel_fluxes_to_remove =  unique([1 7 9 10 3 4 6]);
    if ~isequal(sort(BiggerModel_fluxes_to_remove),1:size(BiggerModel.S,2))
        [~,BiggerModel_regScheme_3contMet] = createRegSchemeList(BiggerModel.S,BiggerModel_fluxes_to_remove);
    end
end

if exist('SmallerModel_regScheme_2contMet','var')
    % Remove from SmallerModel using predicted 2 controller metabolite
    % interactions
    predicted_SmallerModel_2contMet = [SmallerModel_regScheme_2contMet(find(predictedLabel_L2_SmallerModel_2contMet==1),:)];

    SmallerModel_fluxes_to_remove =  unique([1 predicted_SmallerModel_1contMet(:,2)' predicted_SmallerModel_2contMet(:,3)']);
    %SmallerModel_fluxes_to_remove =  unique([1 5 4 3]);
    if ~isequal(sort(SmallerModel_fluxes_to_remove),1:size(SmallerModel.S,2))
        [~,SmallerModel_regScheme_3contMet] = createRegSchemeList(SmallerModel.S,SmallerModel_fluxes_to_remove);
    end
end

%% Identify 3 controller metabolite reactions

if exist('BiggerModel_regScheme_3contMet','var')
    % List of BiggerModel interactions with three controller metabolites
    true_3contMet_BiggerModel = [1,2,7,2;
                             3,6,10,5;
                             5,6,7,8];
    count = 1;
    for regIdx = 1:length(BiggerModel_regScheme_3contMet)
        for trueIdx = 1:size(true_3contMet_BiggerModel,1)
            if isequal(BiggerModel_regScheme_3contMet(regIdx,:),true_3contMet_BiggerModel(trueIdx,:))
                BiggerModel_3contMet_trueInRegIdx(count,1) = regIdx;
                count = count + 1;
            end
        end
    end
end

if exist('SmallerModel_regScheme_3contMet','var')
    % List of SmallerModel interactions with three controller metabolites
    true_3contMet_SmallerModel = [1,4,5,2;
                                  3,5,6,6];
    count = 1;
    for regIdx = 1:length(SmallerModel_regScheme_3contMet)
        for trueIdx = 1:size(true_3contMet_SmallerModel,1)
            if isequal(SmallerModel_regScheme_3contMet(regIdx,:),true_3contMet_SmallerModel(trueIdx,:))
                SmallerModel_3contMet_trueInRegIdx(count,1) = regIdx;
                count = count + 1;
            end
        end
    end
end

% Load autogenerated data information
load(sprintf('AutoGenerateTrain_3contMet_k-01_nT-%03d_cov-%02d_rep-%03d_smooth.mat',nT,cov,rep),'train_true_regs_3contMet','train_interaction_mets_3contMet');
train_true_regs_meta_3contMet = train_true_regs_3contMet;
train_interaction_mets_meta_3contMet = train_interaction_mets_3contMet;
trueInRegIdx_AutoGenerateTrain_meta_3contMet = find(train_true_regs_meta_3contMet == 1);
load(sprintf('AutoGenerateTrain_3contMet_k-01_nT-%03d_cov-%02d_rep-%03d_smooth.mat',nT,cov,rep),'train_true_regs_3contMet','train_interaction_mets_3contMet');
trueInRegIdx_AutoGenerateTrain_3contMet = find(train_true_regs_3contMet == 1);

% Create feature matrix
autogen_prefix = 'AutoGenerateTrain_3contMet';
autogen_meta_prefix = 'AutoGenerateTrain_meta_3contMet';
createFeatMatrix_3contMet_synthetic_noisy

% Setup training set and training label
trueInteractionSet_3contMet = featureMatrix_AutoGenerateTrain_3contMet_n(:,trueInRegIdx_AutoGenerateTrain_3contMet);
trueInteractionLabel_3contMet = logical(ones(1,size(trueInteractionSet_3contMet,2)));
falseInteractionSet_3contMet = featureMatrix_AutoGenerateTrain_3contMet_n;
falseInteractionSet_3contMet(:,trueInRegIdx_AutoGenerateTrain_3contMet) = [];
falseInteractionLabel_3contMet = logical(zeros(1,size(falseInteractionSet_3contMet,2)));

trainingSet_3contMet = [trueInteractionSet_3contMet falseInteractionSet_3contMet];
trainingLabel_3contMet = [trueInteractionLabel_3contMet falseInteractionLabel_3contMet];

% Create first level models
Mdl_RF_3contMet = TreeBagger(200,trainingSet_3contMet',double(trainingLabel_3contMet),'Method','Regression','MinLeafSize',5);

Mdl_KNN_3contMet = fitcknn(trainingSet_3contMet',trainingLabel_3contMet,'NumNeighbors',6);

Mdl_SNN_3contMet = patternnet(20,'trainscg');
Mdl_SNN_3contMet.trainParam.showWindow = 0;    
Mdl_SNN_3contMet = train(Mdl_SNN_3contMet,trainingSet_3contMet,trainingLabel_3contMet);
Mdl_SNN_3contMet = train(Mdl_SNN_3contMet,trainingSet_3contMet,trainingLabel_3contMet);
Mdl_SNN_3contMet = train(Mdl_SNN_3contMet,trainingSet_3contMet,trainingLabel_3contMet);

Mdl_DA_3contMet = fitcdiscr(trainingSet_3contMet',trainingLabel_3contMet,'discrimType','pseudoLinear');

% Predicted labels using second training set
trueInteractionSet_meta_3contMet = featureMatrix_AutoGenerateTrain_meta_3contMet_n(:,trueInRegIdx_AutoGenerateTrain_meta_3contMet);
trueInteractionLabel_meta_3contMet = logical(ones(1,size(trueInteractionSet_meta_3contMet,2)));
falseInteractionSet_meta_3contMet = featureMatrix_AutoGenerateTrain_meta_3contMet_n;
falseInteractionSet_meta_3contMet(:,trueInRegIdx_AutoGenerateTrain_meta_3contMet) = [];
falseInteractionLabel_meta_3contMet = logical(zeros(1,size(falseInteractionSet_meta_3contMet,2)));

trainingSet_meta_3contMet = [trueInteractionSet_meta_3contMet falseInteractionSet_meta_3contMet];
trainingLabel_meta_3contMet = [trueInteractionLabel_meta_3contMet falseInteractionLabel_meta_3contMet];

predictedLabel_RF_meta_3contMet = Mdl_RF_3contMet.predict(trainingSet_meta_3contMet');
predictedLabel_KNN_meta_3contMet = double(Mdl_KNN_3contMet.predict(trainingSet_meta_3contMet'));
predictedLabel_SNN_meta_3contMet = Mdl_SNN_3contMet(trainingSet_meta_3contMet)';
predictedLabel_DA_meta_3contMet = double(Mdl_DA_3contMet.predict(trainingSet_meta_3contMet'));

predictedLabel_L1_meta_3contMet = [predictedLabel_RF_meta_3contMet predictedLabel_KNN_meta_3contMet predictedLabel_SNN_meta_3contMet predictedLabel_DA_meta_3contMet];

% Create second level model
predictedLabel_L1_meta_3contMet_good = predictedLabel_L1_meta_3contMet;
poor_classifier_3contMet = find(all(~diff(predictedLabel_L1_meta_3contMet_good)));
if ~isempty(poor_classifier_3contMet)
    predictedLabel_L1_meta_3contMet_good(:,poor_classifier_3contMet) = [];
end
Mdl_DA_meta_3contMet = fitcdiscr(predictedLabel_L1_meta_3contMet_good,trainingLabel_meta_3contMet,'discrimType','pseudoLinear');

if exist('BiggerModel_regScheme_3contMet','var')
    % BiggerModel
    % Setup testing set and testing label
    testingSet_BiggerModel_3contMet = featureMatrix_3contMet_BiggerModel_n;
    testingLabel_BiggerModel_3contMet = logical(zeros(size(testingSet_BiggerModel_3contMet,2),1));
    if exist('BiggerModel_3contMet_trueInRegIdx','var')
        testingLabel_BiggerModel_3contMet(BiggerModel_3contMet_trueInRegIdx) = 1;
    end
    
    % Predict where 3 controller metabolite reactions occur in BiggerModel
    predictedLabel_RF_BiggerModel_3contMet = Mdl_RF_3contMet.predict(testingSet_BiggerModel_3contMet');
    predictedLabel_KNN_BiggerModel_3contMet = double(Mdl_KNN_3contMet.predict(testingSet_BiggerModel_3contMet'));
    predictedLabel_SNN_BiggerModel_3contMet = Mdl_SNN_3contMet(testingSet_BiggerModel_3contMet)';
    predictedLabel_DA_BiggerModel_3contMet = double(Mdl_DA_3contMet.predict(testingSet_BiggerModel_3contMet'));
    
    predictedLabel_L1_BiggerModel_3contMet = [predictedLabel_RF_BiggerModel_3contMet predictedLabel_KNN_BiggerModel_3contMet predictedLabel_SNN_BiggerModel_3contMet predictedLabel_DA_BiggerModel_3contMet];
    if ~isempty(poor_classifier_3contMet)
        predictedLabel_L1_BiggerModel_3contMet(:,poor_classifier_3contMet) = [];
    end
    predictedLabel_L2_BiggerModel_3contMet = Mdl_DA_meta_3contMet.predict(predictedLabel_L1_BiggerModel_3contMet)

    % Accuracy, sensitivity, and specificity calculations
    predictionAccuracy_BiggerModel_3contMet = sum(predictedLabel_L2_BiggerModel_3contMet==testingLabel_BiggerModel_3contMet)/length(testingLabel_BiggerModel_3contMet)
    fp = 0;
    fn = 0;
    for k = 1:length(testingLabel_BiggerModel_3contMet)
        if testingLabel_BiggerModel_3contMet(k) == 1 && predictedLabel_L2_BiggerModel_3contMet(k) == 0
            fn = fn + 1;
        elseif testingLabel_BiggerModel_3contMet(k) == 0 && predictedLabel_L2_BiggerModel_3contMet(k) == 1
            fp = fp + 1;
        end
    end

    tp = 0;
    tn = 0;
    for k = 1:length(testingLabel_BiggerModel_3contMet)
        if testingLabel_BiggerModel_3contMet(k) == 1 && predictedLabel_L2_BiggerModel_3contMet(k) == 1
            tp = tp + 1;
        elseif testingLabel_BiggerModel_3contMet(k) == 0 && predictedLabel_L2_BiggerModel_3contMet(k) == 0
            tn = tn + 1;
        end
    end
    sensitivity_BiggerModel_3contMet = tp / (fn+tp)
    specificity_BiggerModel_3contMet = tn / (tn+fp)
    ppv_BiggerModel_3contMet = tp / (tp+fp);
    npv_BiggerModel_3contMet = tp / (tn+fn);
end

if exist('SmallerModel_regScheme_3contMet','var')
    % SmallerModel
    % Setup testing set and testing label
    testingSet_SmallerModel_3contMet = featureMatrix_3contMet_SmallerModel_n;
    testingLabel_SmallerModel_3contMet = logical(zeros(size(testingSet_SmallerModel_3contMet,2),1));
    if exist('SmallerModel_3contMet_trueInRegIdx','var')
        testingLabel_SmallerModel_3contMet(SmallerModel_3contMet_trueInRegIdx) = 1;
    end

    % Predict where 3 controller metabolite reactions occur in SmallerModel
    predictedLabel_RF_SmallerModel_3contMet = Mdl_RF_3contMet.predict(testingSet_SmallerModel_3contMet');
    predictedLabel_KNN_SmallerModel_3contMet = double(Mdl_KNN_3contMet.predict(testingSet_SmallerModel_3contMet'));
    predictedLabel_SNN_SmallerModel_3contMet = Mdl_SNN_3contMet(testingSet_SmallerModel_3contMet)';
    predictedLabel_DA_SmallerModel_3contMet = double(Mdl_DA_3contMet.predict(testingSet_SmallerModel_3contMet'));
    
    predictedLabel_L1_SmallerModel_3contMet = [predictedLabel_RF_SmallerModel_3contMet predictedLabel_KNN_SmallerModel_3contMet predictedLabel_SNN_SmallerModel_3contMet predictedLabel_DA_SmallerModel_3contMet];
    if ~isempty(poor_classifier_3contMet)
        predictedLabel_L1_SmallerModel_3contMet(:,poor_classifier_3contMet) = [];
    end
    predictedLabel_L2_SmallerModel_3contMet = Mdl_DA_meta_3contMet.predict(predictedLabel_L1_SmallerModel_3contMet)

    % Accuracy, sensitivity, and specificity calculations
    predictionAccuracy_SmallerModel_3contMet = sum(predictedLabel_L2_SmallerModel_3contMet==testingLabel_SmallerModel_3contMet)/length(testingLabel_SmallerModel_3contMet)
    fp = 0;
    fn = 0;
    for k = 1:length(testingLabel_SmallerModel_3contMet)
        if testingLabel_SmallerModel_3contMet(k) == 1 && predictedLabel_L2_SmallerModel_3contMet(k) == 0
            fn = fn + 1;
        elseif testingLabel_SmallerModel_3contMet(k) == 0 && predictedLabel_L2_SmallerModel_3contMet(k) == 1
            fp = fp + 1;
        end
    end

    tp = 0;
    tn = 0;
    for k = 1:length(testingLabel_SmallerModel_3contMet)
        if testingLabel_SmallerModel_3contMet(k) == 1 && predictedLabel_L2_SmallerModel_3contMet(k) == 1
            tp = tp + 1;
        elseif testingLabel_SmallerModel_3contMet(k) == 0 && predictedLabel_L2_SmallerModel_3contMet(k) == 0
            tn = tn + 1;
        end
    end
    sensitivity_SmallerModel_3contMet = tp / (fn+tp)
    specificity_SmallerModel_3contMet = tn / (tn+fp)
    ppv_SmallerModel_3contMet = tp / (tp+fp);
    npv_SmallerModel_3contMet = tp / (tn+fn);
end

%% Remove 3 controller metabolite reactions
if exist('BiggerModel_regScheme_3contMet','var')
    % Remove from BiggerModel using predicted 3 controller metabolite
    % interactions
    predicted_BiggerModel_3contMet = [BiggerModel_regScheme_3contMet(find(predictedLabel_L2_BiggerModel_3contMet==1),:)];

    BiggerModel_fluxes_to_remove =  unique([1 predicted_BiggerModel_1contMet(:,2)' predicted_BiggerModel_2contMet(:,3)' predicted_BiggerModel_3contMet(:,4)']);
    %BiggerModel_fluxes_to_remove =  unique([1 7 9 10 3 4 6 2 5 8]);
    if ~isequal(sort(BiggerModel_fluxes_to_remove),1:size(BiggerModel.S,2))
        [~,~,BiggerModel_regScheme_4contMet] = createRegSchemeList(BiggerModel.S,BiggerModel_fluxes_to_remove);
    end
end

if exist('SmallerModel_regScheme_3contMet','var')
    % Remove from SmallerModel using predicted 3 controller metabolite
    % interactions
    predicted_SmallerModel_3contMet = [SmallerModel_regScheme_3contMet(find(predictedLabel_L2_SmallerModel_3contMet==1),:)];

    SmallerModel_fluxes_to_remove =  unique([1 predicted_SmallerModel_1contMet(:,2)' predicted_SmallerModel_2contMet(:,3)' predicted_SmallerModel_3contMet(:,4)']);
    %SmallerModel_fluxes_to_remove =  unique([1 5 4 3 2 6]);
    if ~isequal(sort(SmallerModel_fluxes_to_remove),1:size(SmallerModel.S,2))
        [~,~,SmallerModel_regScheme_4contMet] = createRegSchemeList(SmallerModel.S,SmallerModel_fluxes_to_remove);
    end
end

save(sprintf('synthetic_results_IC-%02d_nT-%03d_cov-%02d_rep-%02d.mat',num_IC,nT,cov,rep));
