function SCOUR_Yeast_random(nT,cov,num_IC,rep)
warning('off','all')
rng('shuffle');

fprintf('Starting machine learning framework...\n');

%% Initial Preparation of Hynne yeast model
% Train on autogenerated data, test on Hynne yeast model

% yeast stoichiometric interactions
load('hynneSTM.mat');
Hynne.S = stm;

% Find Hynne mass action (MA) interactions
[row_HynneMA col_HynneMA] = find(Hynne.S < 0);
HynneMA = [row_HynneMA col_HynneMA];

unique_flux = unique(HynneMA(:,2));
count_1contMet = 1;
count_2contMet = 1;
for i = 1:length(unique_flux)
    controller_met_idx = find(HynneMA(:,2) == unique_flux(i));
    if length(HynneMA(controller_met_idx,1)) == 1
        HynneMA_1contMet_List(count_1contMet,:) = [HynneMA(controller_met_idx,1)' unique_flux(i)];
        count_1contMet = count_1contMet + 1;
    elseif length(HynneMA(controller_met_idx,1)) == 2
        HynneMA_2contMet_List(count_2contMet,:) = [HynneMA(controller_met_idx,1)' unique_flux(i)];
        count_2contMet = count_2contMet + 1;
    end
end

Hynne_prefix = 'hynne';

%% Identify 1 controller metabolite reactions

% List of Hynne interactions with one controller metabolite
true_1contMet_Hynne = [14,11;
                       17,14;
                       19,17;
                       20,19;
                        3,23;];
count = 1;
for regIdx = 1:length(HynneMA_1contMet_List)
    for trueIdx = 1:size(true_1contMet_Hynne,1)
        if isequal(HynneMA_1contMet_List(regIdx,:),true_1contMet_Hynne(trueIdx,:))
            Hynne_1contMet_trueInRegIdx(count,1) = regIdx;
            count = count + 1;
        end
    end
end

% Hynne
% Setup testing set and testing label
testingLabel_Hynne_1contMet = logical(zeros(size(HynneMA_1contMet_List,1),1));
testingLabel_Hynne_1contMet(Hynne_1contMet_trueInRegIdx) = 1;

predictedLabel_L2_Hynne_1contMet = logical(round(rand(length(testingLabel_Hynne_1contMet),1)))

% Accuracy, sensitivity, and specificity calculations
predictionAccuracy_Hynne_1contMet = sum(predictedLabel_L2_Hynne_1contMet==testingLabel_Hynne_1contMet)/length(testingLabel_Hynne_1contMet)
fp = 0;
fn = 0;
for k = 1:length(testingLabel_Hynne_1contMet)
    if testingLabel_Hynne_1contMet(k) == 1 && predictedLabel_L2_Hynne_1contMet(k) == 0
        fn = fn + 1;
    elseif testingLabel_Hynne_1contMet(k) == 0 && predictedLabel_L2_Hynne_1contMet(k) == 1
        fp = fp + 1;
    end
end

tp = 0;
tn = 0;
for k = 1:length(testingLabel_Hynne_1contMet)
    if testingLabel_Hynne_1contMet(k) == 1 && predictedLabel_L2_Hynne_1contMet(k) == 1
        tp = tp + 1;
    elseif testingLabel_Hynne_1contMet(k) == 0 && predictedLabel_L2_Hynne_1contMet(k) == 0
        tn = tn + 1;
    end
end
sensitivity_Hynne_1contMet = tp / (fn+tp)
specificity_Hynne_1contMet = tn / (tn+fp)
ppv_Hynne_1contMet = tp / (tp+fp);
npv_Hynne_1contMet = tp / (tn+fn);

%% Remove 1 controller metabolite reactions

% Remove from Hynne using predicted 1 controller metabolite
% interactions
predicted_Hynne_1contMet = [HynneMA_1contMet_List(find(predictedLabel_L2_Hynne_1contMet==1),:)];

%Hynne_fluxes_to_remove =  unique([1 predicted_Hynne_1contMet(:,2)']);
Hynne_fluxes_to_remove =  unique([1 11 14 17 19 23]);
if ~isequal(sort(Hynne_fluxes_to_remove),1:size(Hynne.S,2))
    Hynne_regScheme_2contMet = createRegSchemeList_hynne(Hynne.S,Hynne_fluxes_to_remove);
end

if exist('Hynne_regScheme_2contMet','var')
    %% Identify 2 controller metabolite reactions

    % List of Hynne interactions with two controller metabolites
    true_2contMet_Hynne = [2,3,3;
                           4,6,4;
                           8,9,7;
                           5,13,10;
                           12,15,12;
                           16,17,13;
                           18,19,16;
                           15,20,18;
                           20,21,20;
                           3,4,22;];
    count = 1;
    for regIdx = 1:length(Hynne_regScheme_2contMet)
        for trueIdx = 1:size(true_2contMet_Hynne,1)
            if isequal(Hynne_regScheme_2contMet(regIdx,:),true_2contMet_Hynne(trueIdx,:))
                Hynne_2contMet_trueInRegIdx(count,1) = regIdx;
                count = count + 1;
            end
        end
    end
    
    % Hynne
    % Setup testing set and testing label
    testingLabel_Hynne_2contMet = logical(zeros(size(Hynne_regScheme_2contMet,1),1));
    if exist('Hynne_2contMet_trueInRegIdx','var')
        testingLabel_Hynne_2contMet(Hynne_2contMet_trueInRegIdx) = 1;
    end
    
    predictedLabel_L2_Hynne_2contMet = logical(round(rand(length(testingLabel_Hynne_2contMet),1)))

    % Accuracy, sensitivity, and specificity calculations
    predictionAccuracy_Hynne_2contMet = sum(predictedLabel_L2_Hynne_2contMet==testingLabel_Hynne_2contMet)/length(testingLabel_Hynne_2contMet)
    fp = 0;
    fn = 0;
    for k = 1:length(testingLabel_Hynne_2contMet)
        if testingLabel_Hynne_2contMet(k) == 1 && predictedLabel_L2_Hynne_2contMet(k) == 0
            fn = fn + 1;
        elseif testingLabel_Hynne_2contMet(k) == 0 && predictedLabel_L2_Hynne_2contMet(k) == 1
            fp = fp + 1;
        end
    end

    tp = 0;
    tn = 0;
    for k = 1:length(testingLabel_Hynne_2contMet)
        if testingLabel_Hynne_2contMet(k) == 1 && predictedLabel_L2_Hynne_2contMet(k) == 1
            tp = tp + 1;
        elseif testingLabel_Hynne_2contMet(k) == 0 && predictedLabel_L2_Hynne_2contMet(k) == 0
            tn = tn + 1;
        end
    end
    sensitivity_Hynne_2contMet = tp / (fn+tp)
    specificity_Hynne_2contMet = tn / (tn+fp)
    ppv_Hynne_2contMet = tp / (tp+fp);
    npv_Hynne_2contMet = tp / (tn+fn);

    %% Remove 2 controller metabolite reactions

    % Remove from Hynne using predicted 2 controller metabolite
    % interactions
    predicted_Hynne_2contMet = [Hynne_regScheme_2contMet(find(predictedLabel_L2_Hynne_2contMet==1),:)];

    %Hynne_fluxes_to_remove =  unique([1 predicted_Hynne_1contMet(:,2)' predicted_Hynne_2contMet(:,3)']);
    Hynne_fluxes_to_remove =  unique([1 11 14 17 19 23 3 4 7 10 12 13 16 18 20 22]);
    if ~isequal(sort(Hynne_fluxes_to_remove),1:size(Hynne.S,2))
        [~,Hynne_regScheme_3contMet] = createRegSchemeList_hynne(Hynne.S,Hynne_fluxes_to_remove);
    end
end

if exist('Hynne_regScheme_3contMet','var')
    %% Identify 3 controller metabolite reactions

    % List of Hynne interactions with three controller metabolites
    true_3contMet_Hynne = [1 2 4,2;
                           3 6 22,5;
                           7 8 9,6;
                           9 10 12,15;
                           3 5 22,24];
    count = 1;
    for regIdx = 1:length(Hynne_regScheme_3contMet)
        for trueIdx = 1:size(true_3contMet_Hynne,1)
            if isequal(Hynne_regScheme_3contMet(regIdx,:),true_3contMet_Hynne(trueIdx,:))
                Hynne_3contMet_trueInRegIdx(count,1) = regIdx;
                count = count + 1;
            end
        end
    end
    
    % Hynne
    % Setup testing set and testing label
    testingLabel_Hynne_3contMet = logical(zeros(size(Hynne_regScheme_3contMet,1),1));
    if exist('Hynne_3contMet_trueInRegIdx','var')
        testingLabel_Hynne_3contMet(Hynne_3contMet_trueInRegIdx) = 1;
    end
    
    predictedLabel_L2_Hynne_3contMet = logical(round(rand(length(testingLabel_Hynne_3contMet),1)))

    % Accuracy, sensitivity, and specificity calculations
    predictionAccuracy_Hynne_3contMet = sum(predictedLabel_L2_Hynne_3contMet==testingLabel_Hynne_3contMet)/length(testingLabel_Hynne_3contMet)
    fp = 0;
    fn = 0;
    for k = 1:length(testingLabel_Hynne_3contMet)
        if testingLabel_Hynne_3contMet(k) == 1 && predictedLabel_L2_Hynne_3contMet(k) == 0
            fn = fn + 1;
        elseif testingLabel_Hynne_3contMet(k) == 0 && predictedLabel_L2_Hynne_3contMet(k) == 1
            fp = fp + 1;
        end
    end

    tp = 0;
    tn = 0;
    for k = 1:length(testingLabel_Hynne_3contMet)
        if testingLabel_Hynne_3contMet(k) == 1 && predictedLabel_L2_Hynne_3contMet(k) == 1
            tp = tp + 1;
        elseif testingLabel_Hynne_3contMet(k) == 0 && predictedLabel_L2_Hynne_3contMet(k) == 0
            tn = tn + 1;
        end
    end
    sensitivity_Hynne_3contMet = tp / (fn+tp)
    specificity_Hynne_3contMet = tn / (tn+fp)
    ppv_Hynne_3contMet = tp / (tp+fp);
    npv_Hynne_3contMet = tp / (tn+fn);
    
    predicted_Hynne_3contMet = [Hynne_regScheme_3contMet(find(predictedLabel_L2_Hynne_3contMet==1),:)];
end
save(sprintf('yeast_random_results_IC-%02d_nT-%03d_cov-%02d_rep-%02d.mat',num_IC,nT,cov,rep));
