function SCOUR_Synthetic_random(nT,cov,num_IC,rep)
warning('off','all')
rng('shuffle');

fprintf('Starting machine learning framework...\n');

%% Initial Preparation of Synthetic Models
% Train on autogenerated data, test on BiggerModel and SmallerModel models

% BiggerModel and SmallerModel stoichiometric interactions
BiggerModel.S = sparse([ 1 -1  0  0  0  0  0  0  0  0 ;
                 0  1 -1  0  0 -1  0  0  0  0 ;
                 0  0  1 -1 -1  0  0  0  0  0 ;
                 0  0  0  1  0  0  0  0 -1  0 ;
                 0  0  0  0  1  0  0  0  0  0 ;
                 0  0  0  0  0  1 -1 -1  0  0 ;
                 0  0  0  0  0  0  1  0  0  0 ;
                 0  0  0  0  0  0  0  1  0 -1 ;
                 0  0  0  0  0  0  0  0  1  0 ;
                 0  0  0  0  0  0  0  0  0  1 ;]);

SmallerModel.S = sparse([ 1 -1  0  0  0  0 ;
                 0  1 -1 -1 -1  0 ;
                 0  0  1  0  0  0 ;
                 0  0  0  1  0  0 ;
                 0  0  0  0  1 -1 ;
                 0  0  0  0  0  1 ;]);

% Find BiggerModel mass action (MA) interactions
[row_BiggerModelMA col_BiggerModelMA] = find(BiggerModel.S < 0);
BiggerModel_MA = [row_BiggerModelMA col_BiggerModelMA];

unique_flux = unique(BiggerModel_MA(:,2));
count_1contMet = 1;
count_2contMet = 1;
for i = 1:length(unique_flux)
    controller_met_idx = find(BiggerModel_MA(:,2) == unique_flux(i));
    if length(BiggerModel_MA(controller_met_idx,1)) == 1
        BiggerModel_1contMet_List(count_1contMet,:) = [BiggerModel_MA(controller_met_idx,1)' unique_flux(i)];
        count_1contMet = count_1contMet + 1;
    elseif length(BiggerModel_MA(controller_met_idx,1)) == 2
        BiggerModel_2contMet_List(count_2contMet,:) = [BiggerModel_MA(controller_met_idx,1)' unique_flux(i)];
        count_2contMet = count_2contMet + 1;
    end
end

% Find SmallerModel mass action (MA) interactions
[row_SmallerModelMA col_SmallerModelMA] = find(SmallerModel.S < 0);
SmallerModel_MA = [row_SmallerModelMA col_SmallerModelMA];

unique_flux = unique(SmallerModel_MA(:,2));
count_1contMet = 1;
count_2contMet = 1;
for i = 1:length(unique_flux)
    controller_met_idx = find(SmallerModel_MA(:,2) == unique_flux(i));
    if length(SmallerModel_MA(controller_met_idx,1)) == 1
        SmallerModel_1contMet_List(count_1contMet,:) = [SmallerModel_MA(controller_met_idx,1)' unique_flux(i)];
        count_1contMet = count_1contMet + 1;
    elseif length(SmallerModel_MA(controller_met_idx,1)) == 2
        SmallerModel_2contMet_List(count_2contMet,:) = [SmallerModel_MA(controller_met_idx,1)' unique_flux(i)];
        count_2contMet = count_2contMet + 1;
    end
end

BiggerModel_prefix = 'BiggerModel';
SmallerModel_prefix = 'SmallerModel';


%% Identify 1 controller metabolite reactions

% List of BiggerModel mass action only interactions and find where they occur
% in list of all mass action interactions
true_1contMet_BiggerModel = [6,7;
                         4,9;
                         8,10];
count = 1;
for regIdx = 1:length(BiggerModel_1contMet_List)
    for trueIdx = 1:size(true_1contMet_BiggerModel,1)
        if isequal(BiggerModel_1contMet_List(regIdx,:),true_1contMet_BiggerModel(trueIdx,:))
            BiggerModel_1contMet_trueInRegIdx(count,1) = regIdx;
            count = count + 1;
        end
    end
end

% List of SmallerModel mass action only interactions and find where they 
% occur in list of all mass action interactions
true_1contMet_SmallerModel = [2,5];
count = 1;
for regIdx = 1:length(SmallerModel_1contMet_List)
    for trueIdx = 1:size(true_1contMet_SmallerModel,1)
        if isequal(SmallerModel_1contMet_List(regIdx,:),true_1contMet_SmallerModel(trueIdx,:))
            SmallerModel_1contMet_trueInRegIdx(count,1) = regIdx;
            count = count + 1;
        end
    end
end

% BiggerModel
% Setup testing set and testing label
testingLabel_BiggerModel_1contMet = logical(zeros(size(BiggerModel_1contMet_List,1),1));
testingLabel_BiggerModel_1contMet(BiggerModel_1contMet_trueInRegIdx) = 1;

% Random prediction
predictedLabel_L2_BiggerModel_1contMet = logical(round(rand(length(testingLabel_BiggerModel_1contMet),1)))

% Accuracy, sensitivity, and specificity calculations
predictionAccuracy_BiggerModel_1contMet = sum(predictedLabel_L2_BiggerModel_1contMet==testingLabel_BiggerModel_1contMet)/length(testingLabel_BiggerModel_1contMet)
fp = 0;
fn = 0;
for k = 1:length(testingLabel_BiggerModel_1contMet)
    if testingLabel_BiggerModel_1contMet(k) == 1 && predictedLabel_L2_BiggerModel_1contMet(k) == 0
        fn = fn + 1;
    elseif testingLabel_BiggerModel_1contMet(k) == 0 && predictedLabel_L2_BiggerModel_1contMet(k) == 1
        fp = fp + 1;
    end
end

tp = 0;
tn = 0;
for k = 1:length(testingLabel_BiggerModel_1contMet)
    if testingLabel_BiggerModel_1contMet(k) == 1 && predictedLabel_L2_BiggerModel_1contMet(k) == 1
        tp = tp + 1;
    elseif testingLabel_BiggerModel_1contMet(k) == 0 && predictedLabel_L2_BiggerModel_1contMet(k) == 0
        tn = tn + 1;
    end
end
sensitivity_BiggerModel_1contMet = tp / (fn+tp)
specificity_BiggerModel_1contMet = tn / (tn+fp)
ppv_BiggerModel_1contMet = tp / (tp+fp);
npv_BiggerModel_1contMet = tp / (tn+fn);

% SmallerModel
% Setup testing set and testing label
testingLabel_SmallerModel_1contMet = logical(zeros(size(SmallerModel_1contMet_List,1),1));
testingLabel_SmallerModel_1contMet(SmallerModel_1contMet_trueInRegIdx) = 1;

% Random prediction
predictedLabel_L2_SmallerModel_1contMet = logical(round(rand(length(testingLabel_SmallerModel_1contMet),1)))

% Accuracy, sensitivity, and specificity calculations
predictionAccuracy_SmallerModel_1contMet = sum(predictedLabel_L2_SmallerModel_1contMet==testingLabel_SmallerModel_1contMet)/length(testingLabel_SmallerModel_1contMet)
fp = 0;
fn = 0;
for k = 1:length(testingLabel_SmallerModel_1contMet)
    if testingLabel_SmallerModel_1contMet(k) == 1 && predictedLabel_L2_SmallerModel_1contMet(k) == 0
        fn = fn + 1;
    elseif testingLabel_SmallerModel_1contMet(k) == 0 && predictedLabel_L2_SmallerModel_1contMet(k) == 1
        fp = fp + 1;
    end
end

tp = 0;
tn = 0;
for k = 1:length(testingLabel_SmallerModel_1contMet)
    if testingLabel_SmallerModel_1contMet(k) == 1 && predictedLabel_L2_SmallerModel_1contMet(k) == 1
        tp = tp + 1;
    elseif testingLabel_SmallerModel_1contMet(k) == 0 && predictedLabel_L2_SmallerModel_1contMet(k) == 0
        tn = tn + 1;
    end
end
sensitivity_SmallerModel_1contMet = tp / (fn+tp)
specificity_SmallerModel_1contMet = tn / (tn+fp)
ppv_SmallerModel_1contMet = tp / (tp+fp);
npv_SmallerModel_1contMet = tp / (tn+fn);

%% Remove 1 controller metabolite reactions

%BiggerModel_fluxes_to_remove =  unique([1]);
BiggerModel_fluxes_to_remove =  unique([1 7 9 10]);
if ~isequal(sort(BiggerModel_fluxes_to_remove),1:size(BiggerModel.S,2))
    BiggerModel_regScheme_2contMet = createRegSchemeList(BiggerModel.S,BiggerModel_fluxes_to_remove);
end

%SmallerModel_fluxes_to_remove =  unique([1]);
SmallerModel_fluxes_to_remove =  unique([1 5]);
if ~isequal(sort(SmallerModel_fluxes_to_remove),1:size(SmallerModel.S,2))
    SmallerModel_regScheme_2contMet = createRegSchemeList(SmallerModel.S,SmallerModel_fluxes_to_remove);
end

%% Identify 2 controller metabolite reactions

% List of BiggerModel interactions with two controller metabolites
true_2contMet_BiggerModel = [2,4,3;
                         3,8,4;
                         2,8,6];
count = 1;
for regIdx = 1:length(BiggerModel_regScheme_2contMet)
    for trueIdx = 1:size(true_2contMet_BiggerModel,1)
        if isequal(BiggerModel_regScheme_2contMet(regIdx,:),true_2contMet_BiggerModel(trueIdx,:))
            BiggerModel_2contMet_trueInRegIdx(count,1) = regIdx;
            count = count + 1;
        end
    end
end

% List of SmallerModel interactions with two controller metabolites
true_2contMet_SmallerModel = [2,5,4;
                              2,6,3];
count = 1;
for regIdx = 1:length(SmallerModel_regScheme_2contMet)
    for trueIdx = 1:size(true_2contMet_SmallerModel,1)
        if isequal(SmallerModel_regScheme_2contMet(regIdx,:),true_2contMet_SmallerModel(trueIdx,:))
            SmallerModel_2contMet_trueInRegIdx(count,1) = regIdx;
            count = count + 1;
        end
    end
end

% BiggerModel
% Setup testing set and testing label
testingLabel_BiggerModel_2contMet = logical(zeros(size(BiggerModel_regScheme_2contMet,1),1));
if exist('BiggerModel_2contMet_trueInRegIdx','var')
    testingLabel_BiggerModel_2contMet(BiggerModel_2contMet_trueInRegIdx) = 1;
end

% Random prediction
predictedLabel_L2_BiggerModel_2contMet = logical(round(rand(length(testingLabel_BiggerModel_2contMet),1)))

% Accuracy, sensitivity, and specificity calculations
predictionAccuracy_BiggerModel_2contMet = sum(predictedLabel_L2_BiggerModel_2contMet==testingLabel_BiggerModel_2contMet)/length(testingLabel_BiggerModel_2contMet)
fp = 0;
fn = 0;
for k = 1:length(testingLabel_BiggerModel_2contMet)
    if testingLabel_BiggerModel_2contMet(k) == 1 && predictedLabel_L2_BiggerModel_2contMet(k) == 0
        fn = fn + 1;
    elseif testingLabel_BiggerModel_2contMet(k) == 0 && predictedLabel_L2_BiggerModel_2contMet(k) == 1
        fp = fp + 1;
    end
end

tp = 0;
tn = 0;
for k = 1:length(testingLabel_BiggerModel_2contMet)
    if testingLabel_BiggerModel_2contMet(k) == 1 && predictedLabel_L2_BiggerModel_2contMet(k) == 1
        tp = tp + 1;
    elseif testingLabel_BiggerModel_2contMet(k) == 0 && predictedLabel_L2_BiggerModel_2contMet(k) == 0
        tn = tn + 1;
    end
end
sensitivity_BiggerModel_2contMet = tp / (fn+tp)
specificity_BiggerModel_2contMet = tn / (tn+fp)
ppv_BiggerModel_2contMet = tp / (tp+fp);
npv_BiggerModel_2contMet = tp / (tn+fn);

% SmallerModel
% Setup testing set and testing label
testingLabel_SmallerModel_2contMet = logical(zeros(size(SmallerModel_regScheme_2contMet,1),1));
if exist('SmallerModel_2contMet_trueInRegIdx','var')
    testingLabel_SmallerModel_2contMet(SmallerModel_2contMet_trueInRegIdx) = 1;
end

% Random prediction
predictedLabel_L2_SmallerModel_2contMet = logical(round(rand(length(testingLabel_SmallerModel_2contMet),1)))

% Accuracy, sensitivity, and specificity calculations
predictionAccuracy_SmallerModel_2contMet = sum(predictedLabel_L2_SmallerModel_2contMet==testingLabel_SmallerModel_2contMet)/length(testingLabel_SmallerModel_2contMet)
fp = 0;
fn = 0;
for k = 1:length(testingLabel_SmallerModel_2contMet)
    if testingLabel_SmallerModel_2contMet(k) == 1 && predictedLabel_L2_SmallerModel_2contMet(k) == 0
        fn = fn + 1;
    elseif testingLabel_SmallerModel_2contMet(k) == 0 && predictedLabel_L2_SmallerModel_2contMet(k) == 1
        fp = fp + 1;
    end
end

tp = 0;
tn = 0;
for k = 1:length(testingLabel_SmallerModel_2contMet)
    if testingLabel_SmallerModel_2contMet(k) == 1 && predictedLabel_L2_SmallerModel_2contMet(k) == 1
        tp = tp + 1;
    elseif testingLabel_SmallerModel_2contMet(k) == 0 && predictedLabel_L2_SmallerModel_2contMet(k) == 0
        tn = tn + 1;
    end
end
sensitivity_SmallerModel_2contMet = tp / (fn+tp)
specificity_SmallerModel_2contMet = tn / (tn+fp)
ppv_SmallerModel_2contMet = tp / (tp+fp);
npv_SmallerModel_2contMet = tp / (tn+fn);

%% Remove 2 controller metabolite reactions

if exist('BiggerModel_regScheme_2contMet','var')
    %BiggerModel_fluxes_to_remove =  unique([1]);
    BiggerModel_fluxes_to_remove =  unique([1 7 9 10 3 4 6]);
    if ~isequal(sort(BiggerModel_fluxes_to_remove),1:size(BiggerModel.S,2))
        [~,BiggerModel_regScheme_3contMet] = createRegSchemeList(BiggerModel.S,BiggerModel_fluxes_to_remove);
    end
end

if exist('SmallerModel_regScheme_2contMet','var')
    %SmallerModel_fluxes_to_remove =  unique([1]);
    SmallerModel_fluxes_to_remove =  unique([1 5 4 3]);
    if ~isequal(sort(SmallerModel_fluxes_to_remove),1:size(SmallerModel.S,2))
        [~,SmallerModel_regScheme_3contMet] = createRegSchemeList(SmallerModel.S,SmallerModel_fluxes_to_remove);
    end
end

%% Identify 3 controller metabolite reactions

% List of BiggerModel interactions with three controller metabolites
true_3contMet_BiggerModel = [1,2,7,2;
                         3,6,10,5;
                         5,6,7,8];
count = 1;
for regIdx = 1:length(BiggerModel_regScheme_3contMet)
    for trueIdx = 1:size(true_3contMet_BiggerModel,1)
        if isequal(BiggerModel_regScheme_3contMet(regIdx,:),true_3contMet_BiggerModel(trueIdx,:))
            BiggerModel_3contMet_trueInRegIdx(count,1) = regIdx;
            count = count + 1;
        end
    end
end

% List of SmallerModel interactions with three controller metabolites
true_3contMet_SmallerModel = [1,4,5,2;
                              3,5,6,6];
count = 1;
for regIdx = 1:length(SmallerModel_regScheme_3contMet)
    for trueIdx = 1:size(true_3contMet_SmallerModel,1)
        if isequal(SmallerModel_regScheme_3contMet(regIdx,:),true_3contMet_SmallerModel(trueIdx,:))
            SmallerModel_3contMet_trueInRegIdx(count,1) = regIdx;
            count = count + 1;
        end
    end
end

% BiggerModel
% Setup testing set and testing label
testingLabel_BiggerModel_3contMet = logical(zeros(size(BiggerModel_regScheme_3contMet,1),1));
if exist('BiggerModel_3contMet_trueInRegIdx','var')
    testingLabel_BiggerModel_3contMet(BiggerModel_3contMet_trueInRegIdx) = 1;
end

% Random prediction
predictedLabel_L2_BiggerModel_3contMet = logical(round(rand(length(testingLabel_BiggerModel_3contMet),1)))

% Accuracy, sensitivity, and specificity calculations
predictionAccuracy_BiggerModel_3contMet = sum(predictedLabel_L2_BiggerModel_3contMet==testingLabel_BiggerModel_3contMet)/length(testingLabel_BiggerModel_3contMet)
fp = 0;
fn = 0;
for k = 1:length(testingLabel_BiggerModel_3contMet)
    if testingLabel_BiggerModel_3contMet(k) == 1 && predictedLabel_L2_BiggerModel_3contMet(k) == 0
        fn = fn + 1;
    elseif testingLabel_BiggerModel_3contMet(k) == 0 && predictedLabel_L2_BiggerModel_3contMet(k) == 1
        fp = fp + 1;
    end
end

tp = 0;
tn = 0;
for k = 1:length(testingLabel_BiggerModel_3contMet)
    if testingLabel_BiggerModel_3contMet(k) == 1 && predictedLabel_L2_BiggerModel_3contMet(k) == 1
        tp = tp + 1;
    elseif testingLabel_BiggerModel_3contMet(k) == 0 && predictedLabel_L2_BiggerModel_3contMet(k) == 0
        tn = tn + 1;
    end
end
sensitivity_BiggerModel_3contMet = tp / (fn+tp)
specificity_BiggerModel_3contMet = tn / (tn+fp)
ppv_BiggerModel_3contMet = tp / (tp+fp);
npv_BiggerModel_3contMet = tp / (tn+fn);

% SmallerModel
% Setup testing set and testing label
testingLabel_SmallerModel_3contMet = logical(zeros(size(SmallerModel_regScheme_3contMet,1),1));
if exist('SmallerModel_3contMet_trueInRegIdx','var')
    testingLabel_SmallerModel_3contMet(SmallerModel_3contMet_trueInRegIdx) = 1;
end

% Random prediction
predictedLabel_L2_SmallerModel_3contMet = logical(round(rand(length(testingLabel_SmallerModel_3contMet),1)))

% Accuracy, sensitivity, and specificity calculations
predictionAccuracy_SmallerModel_3contMet = sum(predictedLabel_L2_SmallerModel_3contMet==testingLabel_SmallerModel_3contMet)/length(testingLabel_SmallerModel_3contMet)
fp = 0;
fn = 0;
for k = 1:length(testingLabel_SmallerModel_3contMet)
    if testingLabel_SmallerModel_3contMet(k) == 1 && predictedLabel_L2_SmallerModel_3contMet(k) == 0
        fn = fn + 1;
    elseif testingLabel_SmallerModel_3contMet(k) == 0 && predictedLabel_L2_SmallerModel_3contMet(k) == 1
        fp = fp + 1;
    end
end

tp = 0;
tn = 0;
for k = 1:length(testingLabel_SmallerModel_3contMet)
    if testingLabel_SmallerModel_3contMet(k) == 1 && predictedLabel_L2_SmallerModel_3contMet(k) == 1
        tp = tp + 1;
    elseif testingLabel_SmallerModel_3contMet(k) == 0 && predictedLabel_L2_SmallerModel_3contMet(k) == 0
        tn = tn + 1;
    end
end
sensitivity_SmallerModel_3contMet = tp / (fn+tp)
specificity_SmallerModel_3contMet = tn / (tn+fp)
ppv_SmallerModel_3contMet = tp / (tp+fp);
npv_SmallerModel_3contMet = tp / (tn+fn);

save(sprintf('synthetic_random_results_IC-%02d_nT-%03d_cov-%02d_rep-%02d.mat',num_IC,nT,cov,rep));
